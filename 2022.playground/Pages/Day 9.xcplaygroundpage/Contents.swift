//: [Previous](@previous)

import Foundation
import XCPlayground

func loadInput() -> String {
    let inputPath = Bundle.main.path(forResource: "day9", ofType: nil)!
    let pathURL = URL(filePath: inputPath)
    let data = try! Data(contentsOf: pathURL)
    return String(data: data, encoding: .utf8)!
}

//--- Day 9: Rope Bridge ---
// You just need to work out where the tail goes as the head follows a series of motions.
// Assume the head and the tail both start at the same position, overlapping.
//
//For example:
//
//R 4
//U 4
//L 3
//D 1
//R 4
//D 1
//L 5
//R 2
// This series of motions moves the head right four steps, then up four steps, then left three steps, then down one step, and so on.
// After each step, you'll need to update the position of the tail if the step means the head is no longer adjacent to the tail.
// Visually, these motions occur as follows (s marks the starting position as a reference point):
//
//== Initial State ==
//
//......
//......
//......
//......
//H.....  (H covers T, s)
//
//== R 4 ==
//
//......
//......
//......
//......
//TH....  (T covers s)
//
//......
//......
//......
//......
//sTH...
//
//......
//......
//......
//......
//s.TH..
//
//......
//......
//......
//......
//s..TH.
//
//== U 4 ==
//
//......
//......
//......
//....H.
//s..T..
//
//......
//......
//....H.
//....T.
//s.....
//
//......
//....H.
//....T.
//......
//s.....
//
//....H.
//....T.
//......
//......
//s.....
//
//== L 3 ==
//
//...H..
//....T.
//......
//......
//s.....
//
//..HT..
//......
//......
//......
//s.....
//
//.HT...
//......
//......
//......
//s.....
//
//== D 1 ==
//
//..T...
//.H....
//......
//......
//s.....
//
//== R 4 ==
//
//..T...
//..H...
//......
//......
//s.....
//
//..T...
//...H..
//......
//......
//s.....
//
//......
//...TH.
//......
//......
//s.....
//
//......
//....TH
//......
//......
//s.....
//
//== D 1 ==
//
//......
//....T.
//.....H
//......
//s.....
//
//== L 5 ==
//
//......
//....T.
//....H.
//......
//s.....
//
//......
//....T.
//...H..
//......
//s.....
//
//......
//......
//..HT..
//......
//s.....
//
//......
//......
//.HT...
//......
//s.....
//
//......
//......
//HT....
//......
//s.....
//
//== R 2 ==
//
//......
//......
//.H....  (H covers T)
//......
//s.....
//
//......
//......
//.TH...
//......
//s.....
// After simulating the rope, you can count up all of the positions the tail visited at least once.
// In this diagram, s again marks the starting position (which the tail also visited) and # marks other positions the tail visited:
//
//..##..
//...##.
//.####.
//....#.
//s###..
//So, there are 13 positions the tail visited at least once.
//
// Simulate your complete hypothetical series of motions.
// How many positions does the tail of the rope visit at least once?
//
// To begin, get your puzzle input.

// How many positions does the tail of the rope visit at least once?
func task1(input: String) -> Int {
    
    struct Position: Hashable, CustomStringConvertible {
        let x: Int
        let y: Int
        
        func moveLeft() -> Position {
            .init(x: x - 1, y: y)
        }
        
        func moveDown() -> Position {
            .init(x: x, y: y - 1)
        }
        
        func moveRight() -> Position {
            .init(x: x + 1, y: y)
        }
        
        func moveTop() -> Position {
            .init(x: x, y: y + 1)
        }
        
        var description: String {
            "Position(x: \(x), y: \(y))"
        }
        
        var headPositionsToIgnore: Set<Position> {
            [
                Position(x: x - 1, y: y - 1),
                Position(x: x, y: y - 1),
                Position(x: x + 1, y: y - 1),
                
                Position(x: x - 1, y: y),
                Position(x: x, y: y),
                Position(x: x + 1, y: y),
                
                Position(x: x - 1, y: y + 1),
                Position(x: x, y: y + 1),
                Position(x: x + 1, y: y + 1),
            ]
        }
    }
    
    
    // If the head moves far enough away from the tail, the tail is pulled toward the head.
    // The head (H) and tail (T) must always be touching (diagonally adjacent and even overlapping both count as touching):
    // If the head is ever two steps directly up, down, left, or right from the tail, the tail must also move one step in that direction so it remains close enough
    // if the head and tail aren't touching and aren't in the same row or column, the tail always moves one step diagonally to keep up:
    
    var uniqueTailPositions: Set<Position> = []
    
    let rows = input.components(separatedBy: CharacterSet.newlines).filter { !$0.isEmpty }
    
    var currentHeadPosition = Position(x: 0, y: 0)
    var currentTailPosition = Position(x: 0, y: 0)
    
    for row in rows {
        let rowElements = row.components(separatedBy: CharacterSet.whitespaces)
        let direction = rowElements[0]
        let length = Int(rowElements[1])!
        print((direction, length))
        
        for _ in 0..<length {
            switch direction {
            case "D":
                currentHeadPosition = currentHeadPosition.moveDown()
            case "R":
                currentHeadPosition = currentHeadPosition.moveRight()
            case "U":
                currentHeadPosition = currentHeadPosition.moveTop()
            case "L":
                currentHeadPosition = currentHeadPosition.moveLeft()
            default:
                fatalError()
            }
            
            if !currentTailPosition.headPositionsToIgnore.contains(currentHeadPosition) {
                // The head has moved somewhere we need to care about so outside of the closest rects
                // 12 positions to care about
                if currentHeadPosition == currentTailPosition.moveTop().moveTop().moveLeft() { // 1
                    currentTailPosition = currentTailPosition.moveTop().moveLeft()
                } else if currentHeadPosition == currentTailPosition.moveTop().moveTop() { // 2
                    currentTailPosition = currentTailPosition.moveTop()
                } else if currentHeadPosition == currentTailPosition.moveTop().moveTop().moveRight() { // 3
                    currentTailPosition = currentTailPosition.moveTop().moveRight()
                } else if currentHeadPosition == currentTailPosition.moveTop().moveRight().moveRight() { // 4
                    currentTailPosition = currentTailPosition.moveTop().moveRight()
                } else if currentHeadPosition == currentTailPosition.moveRight().moveRight() { // 5
                    currentTailPosition = currentTailPosition.moveRight()
                } else if currentHeadPosition == currentTailPosition.moveDown().moveRight().moveRight() { // 6
                    currentTailPosition = currentTailPosition.moveDown().moveRight()
                } else if currentHeadPosition == currentTailPosition.moveDown().moveDown().moveRight() { // 7
                    currentTailPosition = currentTailPosition.moveDown().moveRight()
                } else if currentHeadPosition == currentTailPosition.moveDown().moveDown() { // 8
                    currentTailPosition = currentTailPosition.moveDown()
                } else if currentHeadPosition == currentTailPosition.moveDown().moveDown().moveLeft() { // 9
                    currentTailPosition = currentTailPosition.moveDown().moveLeft()
                } else if currentHeadPosition == currentTailPosition.moveDown().moveLeft().moveLeft() { // 10
                    currentTailPosition = currentTailPosition.moveDown().moveLeft()
                } else if currentHeadPosition == currentTailPosition.moveLeft().moveLeft() { // 11
                    currentTailPosition = currentTailPosition.moveLeft()
                } else if currentHeadPosition == currentTailPosition.moveLeft().moveLeft().moveTop() { // 12
                    currentTailPosition = currentTailPosition.moveTop().moveLeft()
                }
            }
            
            print(("currentHeadPosition", currentHeadPosition, "currentTailPosition", currentTailPosition))
            
            uniqueTailPositions.insert(currentTailPosition)
        }
    }
    
    return uniqueTailPositions.count
}

//print(task1(input: loadInput()))

//let sampleInput = """
//R 4
//U 4
//L 3
//D 1
//R 4
//D 1
//L 5
//R 2
//"""
//
//task1(input: sampleInput) == 13

//--- Part Two ---
// Here's a larger example:
//
//R 5
//U 8
//L 8
//D 3
//R 17
//D 10
//L 25
//U 20

//These motions occur as follows (individual steps are not shown):
//
//== Initial State ==
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
//..........................
//..........................
//..........................
//..........................
//..........................
//
//== R 5 ==
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//...........54321H.........  (5 covers 6, 7, 8, 9, s)
//..........................
//..........................
//..........................
//..........................
//..........................
//
//== U 8 ==
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//................H.........
//................1.........
//................2.........
//................3.........
//...............54.........
//..............6...........
//.............7............
//............8.............
//...........9..............  (9 covers s)
//..........................
//..........................
//..........................
//..........................
//..........................
//
//== L 8 ==
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//........H1234.............
//............5.............
//............6.............
//............7.............
//............8.............
//............9.............
//..........................
//..........................
//...........s..............
//..........................
//..........................
//..........................
//..........................
//..........................
//
//== D 3 ==
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//.........2345.............
//........1...6.............
//........H...7.............
//............8.............
//............9.............
//..........................
//..........................
//...........s..............
//..........................
//..........................
//..........................
//..........................
//..........................
//
//== R 17 ==
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//................987654321H
//..........................
//..........................
//..........................
//..........................
//...........s..............
//..........................
//..........................
//..........................
//..........................
//..........................
//
//== D 10 ==
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//...........s.........98765
//.........................4
//.........................3
//.........................2
//.........................1
//.........................H
//
//== L 25 ==
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//...........s..............
//..........................
//..........................
//..........................
//..........................
//H123456789................
//
//== U 20 ==
//
//H.........................
//1.........................
//2.........................
//3.........................
//4.........................
//5.........................
//6.........................
//7.........................
//8.........................
//9.........................
//..........................
//..........................
//..........................
//..........................
//..........................
//...........s..............
//..........................
//..........................
//..........................
//..........................
//..........................
//
//Now, the tail (9) visits 36 positions (including s) at least once:
//
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//..........................
//#.........................
//#.............###.........
//#............#...#........
//.#..........#.....#.......
//..#..........#.....#......
//...#........#.......#.....
//....#......s.........#....
//.....#..............#.....
//......#............#......
//.......#..........#.......
//........#........#........
//.........########.........
//Simulate your complete series of motions on a larger rope with ten knots. How many positions does the tail of the rope visit at least once?
//


func task2(input: String) -> Int {
    
    struct Position: Hashable, CustomStringConvertible {
        let x: Int
        let y: Int
        
        func moveLeft() -> Position {
            .init(x: x - 1, y: y)
        }
        
        func moveDown() -> Position {
            .init(x: x, y: y - 1)
        }
        
        func moveRight() -> Position {
            .init(x: x + 1, y: y)
        }
        
        func moveTop() -> Position {
            .init(x: x, y: y + 1)
        }
        
        var description: String {
            "Position(x: \(x), y: \(y))"
        }
        
        var headPositionsToIgnore: Set<Position> {
            [
                Position(x: x - 1, y: y - 1),
                Position(x: x, y: y - 1),
                Position(x: x + 1, y: y - 1),
                
                Position(x: x - 1, y: y),
                Position(x: x, y: y),
                Position(x: x + 1, y: y),
                
                Position(x: x - 1, y: y + 1),
                Position(x: x, y: y + 1),
                Position(x: x + 1, y: y + 1),
            ]
        }
    }
    
    var uniqueTailPositions: Set<Position> = []
    
    let rows = input.components(separatedBy: CharacterSet.newlines).filter { !$0.isEmpty }
    
    var rope = [Position](repeating: .init(x: 0, y: 0), count: 10)
    
    func draw(_ input: [Position]) {
        var drawingBoard = [[String]](repeating: [String](repeating: "*", count: 50), count: 50)
        for (idx, position) in input.enumerated() {
            drawingBoard[position.y + 20][position.x + 20] = "\(idx)"
        }
        
        let po = drawingBoard.reduce("") { partialResult, row in
            return partialResult + "\n" + row.joined(separator: " ")
        }
        print(po)
    }
    
    for row in rows {
        let rowElements = row.components(separatedBy: CharacterSet.whitespaces)
        let direction = rowElements[0]
        let length = Int(rowElements[1])!
    
        print((direction, length))
        for _ in 0..<length {
            switch direction {
            case "D":
                rope[0] = rope[0].moveDown()
            case "R":
                rope[0] = rope[0].moveRight()
            case "U":
                rope[0] = rope[0].moveTop()
            case "L":
                rope[0] = rope[0].moveLeft()
            default:
                fatalError()
            }
            
            
            for i in (1..<10) {
                let currentHeadPosition = rope[i - 1]
                var currentTailPosition = rope[i]
                if !currentTailPosition.headPositionsToIgnore.contains(currentHeadPosition) {
                    // The head has moved somewhere we need to care about so outside of the closest rects
                    // 12 positions to care about
                    if currentHeadPosition == currentTailPosition.moveTop().moveTop().moveLeft() { // 1
                        currentTailPosition = currentTailPosition.moveTop().moveLeft()
                    } else if currentHeadPosition == currentTailPosition.moveTop().moveTop() { // 2
                        currentTailPosition = currentTailPosition.moveTop()
                    } else if currentHeadPosition == currentTailPosition.moveTop().moveTop().moveRight() { // 3
                        currentTailPosition = currentTailPosition.moveTop().moveRight()
                    } else if currentHeadPosition == currentTailPosition.moveTop().moveRight().moveRight() { // 4
                        currentTailPosition = currentTailPosition.moveTop().moveRight()
                    } else if currentHeadPosition == currentTailPosition.moveRight().moveRight() { // 5
                        currentTailPosition = currentTailPosition.moveRight()
                    } else if currentHeadPosition == currentTailPosition.moveDown().moveRight().moveRight() { // 6
                        currentTailPosition = currentTailPosition.moveDown().moveRight()
                    } else if currentHeadPosition == currentTailPosition.moveDown().moveDown().moveRight() { // 7
                        currentTailPosition = currentTailPosition.moveDown().moveRight()
                    } else if currentHeadPosition == currentTailPosition.moveDown().moveDown() { // 8
                        currentTailPosition = currentTailPosition.moveDown()
                    } else if currentHeadPosition == currentTailPosition.moveDown().moveDown().moveLeft() { // 9
                        currentTailPosition = currentTailPosition.moveDown().moveLeft()
                    } else if currentHeadPosition == currentTailPosition.moveDown().moveLeft().moveLeft() { // 10
                        currentTailPosition = currentTailPosition.moveDown().moveLeft()
                    } else if currentHeadPosition == currentTailPosition.moveLeft().moveLeft() { // 11
                        currentTailPosition = currentTailPosition.moveLeft()
                    } else if currentHeadPosition == currentTailPosition.moveLeft().moveLeft().moveTop() { // 12
                        currentTailPosition = currentTailPosition.moveTop().moveLeft()
                    } else if currentHeadPosition == currentTailPosition.moveLeft().moveLeft().moveTop().moveTop() {
                        currentTailPosition = currentTailPosition.moveTop().moveLeft()
                    } else if currentHeadPosition == currentTailPosition.moveRight().moveRight().moveTop().moveTop() {
                        currentTailPosition = currentTailPosition.moveTop().moveRight()
                    } else if currentHeadPosition == currentTailPosition.moveRight().moveRight().moveDown().moveDown() {
                        currentTailPosition = currentTailPosition.moveDown().moveRight()
                    } else if currentHeadPosition == currentTailPosition.moveLeft().moveLeft().moveDown().moveDown() {
                        currentTailPosition = currentTailPosition.moveDown().moveLeft()
                    } else {
                        assertionFailure("Runaway rope i: \(i), currentHeadPosition: \(currentHeadPosition) currentTailPosition: \(currentTailPosition)")
                    }
                }
                
                rope[i] = currentTailPosition
            }
            uniqueTailPositions.insert(rope.last!)
        }
        
        print(rope, separator: "\n")
        
    }
    
    return uniqueTailPositions.count
}

//task2(input: "U 10")

//let sampleInput = """
//R 4
//U 4
//L 3
//D 1
//R 4
//D 1
//L 5
//R 2
//"""
//
//task2(input: sampleInput)



//let sampleInput = """
//R 5
//U 8
//L 8
//D 3
//R 17
//D 10
//L 25
//U 20
//"""
//task2(input: sampleInput)

print(task2(input: loadInput()))
